{-# OPTIONS --without-K --guardedness --safe #-}

open import Text.Parser.Types.Core using (Parameters)

module Data.SExp.Parser {l} {P : Parameters l} where

import Data.String.Base as String
open import Data.List as List using (List)

open import Data.Char.Base using (Char)
open import Data.List.Sized.Interface using (Sized)
open import Data.List.NonEmpty as List‚Å∫ using (List‚Å∫) renaming (map to map‚Å∫)
open import Data.Subset using (Subset; into)
open import Effect.Monad using (RawMonadPlus)
open import Function.Base using (_‚àò_; _$_)
open import Induction.Nat.Strong using (fix; map; ‚ñ°_)
open import Relation.Binary.PropositionalEquality.Decidable using (DecidableEquality)
open import Relation.Unary using (IUniversal; _‚áí_)
open import Level.Bounded using (theSet; [_])
open import Text.Parser.Types P using (Parser)
open import Text.Parser.Combinators {P = P} using (_<$>_; list‚Å∫; _<|>_; _<$_; _<&_; _<&?_; box)
open import Text.Parser.Combinators.Char {P = P} using (alpha; parens; withSpaces; spaces; char)
open import Text.Parser.Combinators.Numbers {P = P} using (decimal‚Ñï)

open import Data.SExp using (SExp)
open SExp

open Parameters P using (M; Tok; Toks)

module _
    {{ùïÑ : RawMonadPlus M}}
    {{ùïä : Sized Tok Toks}}
    {{ùîª : DecidableEquality (theSet Tok)}}
    {{‚ÑÇ : Subset Char (theSet Tok)}}
    {{‚ÑÇ‚Åª : Subset (theSet Tok) Char}}
  where

  -- An atom is just a non-empty list of alphabetical characters.
  -- We use `<$>` to turn that back into a string and apply the `Atom` constructor.
  atom : ‚àÄ[ Parser [ SExp ] ]
  atom = Atom ‚àò String.fromList‚Å∫ ‚àò map‚Å∫ (into ‚ÑÇ‚Åª) <$> list‚Å∫ alpha

  -- Natural number parser
  nat : ‚àÄ[ Parser [ SExp ] ]
  nat = Nat <$> decimal‚Ñï

  -- Empty list parser
  nil : ‚àÄ[ Parser [ SExp ] ]
  nil = SExps List.[] <$ char '(' <&? box spaces <& box (char ')')

  -- Parser for a list of S-Expressions
  list : ‚àÄ[ Parser [ SExp ] ‚áí Parser [ List SExp ] ]
  list sexp = List‚Å∫.toList <$> list‚Å∫ (withSpaces sexp)

  -- Compound S-Expression parser
  compound : ‚àÄ[ ‚ñ° Parser [ SExp ] ‚áí Parser [ SExp ] ]
  compound rec = nil <|> SExps <$> parens (map list rec)

  -- S-Expression parser
  sexp : ‚àÄ[ ‚ñ° Parser [ SExp ] ‚áí Parser [ SExp ] ]
  sexp rec = atom <|> nat <|> compound rec

  -- Build the parser as a fixpoint since SExp is an inductive type
  sexp-top : ‚àÄ[ Parser [ SExp ] ]
  sexp-top = fix (Parser [ SExp ]) sexp

  -- Top-level parser for list of S-Expressions
  LIST : ‚àÄ[ Parser [ SExp ] ]
  LIST = SExps <$> list sexp-top

  -- Top-level S-Expression parser
  SEXP : ‚àÄ[ Parser [ SExp ] ]
  SEXP = withSpaces sexp-top
