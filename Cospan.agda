{-# OPTIONS --without-K --safe #-}

open import Categories.Category using (Category)
open import Categories.Diagram.Pushout using (Pushout)
open import Categories.Diagram.Pushout.Properties using (glue; swap)
open import Categories.Object.Coproduct using (Coproduct)
open import Category.Cocomplete.Bundle using (FinitelyCocompleteCategory)
open import Function using (flip)
open import Level using (_‚äî_)

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong; sym)

module Cospan {o ‚Ñì e} (ùíû : FinitelyCocompleteCategory o ‚Ñì e) where

open FinitelyCocompleteCategory ùíû
open import Categories.Morphism U

private

  variable
    A B C D X Y Z : Obj
    f g h : A ‚áí B

record Cospan (A B : Obj) : Set (o ‚äî ‚Ñì) where

  field
    {N} : Obj
    f‚ÇÅ    : A ‚áí N
    f‚ÇÇ    : B ‚áí N

compose : Cospan A B ‚Üí Cospan B C ‚Üí Cospan A C
compose c‚ÇÅ c‚ÇÇ = record { f‚ÇÅ = p.i‚ÇÅ ‚àò C‚ÇÅ.f‚ÇÅ ; f‚ÇÇ = p.i‚ÇÇ ‚àò C‚ÇÇ.f‚ÇÇ }
  where
    module C‚ÇÅ = Cospan c‚ÇÅ
    module C‚ÇÇ = Cospan c‚ÇÇ
    module p = pushout C‚ÇÅ.f‚ÇÇ C‚ÇÇ.f‚ÇÅ

identity : Cospan A A
identity = record { f‚ÇÅ = id ; f‚ÇÇ = id }

compose-3 : Cospan A B ‚Üí Cospan B C ‚Üí Cospan C D ‚Üí Cospan A D
compose-3 c‚ÇÅ c‚ÇÇ c‚ÇÉ = record { f‚ÇÅ = P‚ÇÉ.i‚ÇÅ ‚àò P‚ÇÅ.i‚ÇÅ ‚àò C‚ÇÅ.f‚ÇÅ ; f‚ÇÇ = P‚ÇÉ.i‚ÇÇ ‚àò P‚ÇÇ.i‚ÇÇ ‚àò C‚ÇÉ.f‚ÇÇ }
  where
    module C‚ÇÅ = Cospan c‚ÇÅ
    module C‚ÇÇ = Cospan c‚ÇÇ
    module C‚ÇÉ = Cospan c‚ÇÉ
    module P‚ÇÅ = pushout C‚ÇÅ.f‚ÇÇ C‚ÇÇ.f‚ÇÅ
    module P‚ÇÇ = pushout C‚ÇÇ.f‚ÇÇ C‚ÇÉ.f‚ÇÅ
    module P‚ÇÉ = pushout P‚ÇÅ.i‚ÇÇ P‚ÇÇ.i‚ÇÅ

record Same (P P‚Ä≤ : Cospan A B) : Set (‚Ñì ‚äî e) where

  field
    iso : Cospan.N P ‚âÖ Cospan.N P‚Ä≤
    from‚àòf‚ÇÅ‚âàf‚ÇÅ‚Ä≤ : _‚âÖ_.from iso ‚àò Cospan.f‚ÇÅ P ‚âà Cospan.f‚ÇÅ P‚Ä≤
    from‚àòf‚ÇÇ‚âàf‚ÇÇ‚Ä≤ : _‚âÖ_.from iso ‚àò Cospan.f‚ÇÇ P ‚âà Cospan.f‚ÇÇ P‚Ä≤

glue-i‚ÇÅ : (p : Pushout U f g) ‚Üí Pushout U h (Pushout.i‚ÇÅ p) ‚Üí Pushout U (h ‚àò f) g
glue-i‚ÇÅ p = glue U p

glue-i‚ÇÇ : (p‚ÇÅ : Pushout U f g) ‚Üí Pushout U (Pushout.i‚ÇÇ p‚ÇÅ) h ‚Üí Pushout U f (h ‚àò g)
glue-i‚ÇÇ p‚ÇÅ p‚ÇÇ = swap U (glue U (swap U p‚ÇÅ) (swap U p‚ÇÇ))

compose-3-right
    : {c‚ÇÅ : Cospan A B}
      {c‚ÇÇ : Cospan B C}
      {c‚ÇÉ : Cospan C D}
    ‚Üí Same (compose c‚ÇÅ (compose c‚ÇÇ c‚ÇÉ)) (compose-3 c‚ÇÅ c‚ÇÇ c‚ÇÉ)
compose-3-right {A} {_} {_} {_} {c‚ÇÅ} {c‚ÇÇ} {c‚ÇÉ} = record
    { iso = record
        { from = P‚ÇÑ‚Ä≤.universal P‚ÇÑ.commute
        ; to = P‚ÇÑ.universal P‚ÇÑ‚Ä≤.commute
        ; iso = {! !}
        }
    ; from‚àòf‚ÇÅ‚âàf‚ÇÅ‚Ä≤ = sym-assoc ‚óã P‚ÇÑ‚Ä≤.universal‚àòi‚ÇÅ‚âàh‚ÇÅ ‚ü©‚àò‚ü®refl ‚óã assoc
    ; from‚àòf‚ÇÇ‚âàf‚ÇÇ‚Ä≤ = sym-assoc ‚óã P‚ÇÑ‚Ä≤.universal‚àòi‚ÇÇ‚âàh‚ÇÇ ‚ü©‚àò‚ü®refl
    }
  where
    open HomReasoning
    module C‚ÇÅ = Cospan c‚ÇÅ
    module C‚ÇÇ = Cospan c‚ÇÇ
    module C‚ÇÉ = Cospan c‚ÇÉ
    P‚ÇÅ = pushout C‚ÇÅ.f‚ÇÇ C‚ÇÇ.f‚ÇÅ
    P‚ÇÇ = pushout C‚ÇÇ.f‚ÇÇ C‚ÇÉ.f‚ÇÅ
    module P‚ÇÅ = Pushout P‚ÇÅ
    module P‚ÇÇ = Pushout P‚ÇÇ
    P‚ÇÉ = pushout P‚ÇÅ.i‚ÇÇ P‚ÇÇ.i‚ÇÅ
    module P‚ÇÉ = Pushout P‚ÇÉ
    P‚ÇÑ : Pushout U C‚ÇÅ.f‚ÇÇ (P‚ÇÇ.i‚ÇÅ ‚àò C‚ÇÇ.f‚ÇÅ)
    P‚ÇÑ = glue-i‚ÇÇ P‚ÇÅ P‚ÇÉ
    module P‚ÇÑ = Pushout P‚ÇÑ
    P‚ÇÑ‚Ä≤ : Pushout U C‚ÇÅ.f‚ÇÇ (P‚ÇÇ.i‚ÇÅ ‚àò C‚ÇÇ.f‚ÇÅ)
    P‚ÇÑ‚Ä≤ = pushout C‚ÇÅ.f‚ÇÇ (P‚ÇÇ.i‚ÇÅ ‚àò C‚ÇÇ.f‚ÇÅ)
    module P‚ÇÑ‚Ä≤ = Pushout P‚ÇÑ‚Ä≤

compose-assoc
    : {c‚ÇÅ : Cospan A B}
      {c‚ÇÇ : Cospan B C}
      {c‚ÇÉ : Cospan C D}
    ‚Üí Same (compose c‚ÇÅ (compose c‚ÇÇ c‚ÇÉ)) (compose (compose c‚ÇÅ c‚ÇÇ) c‚ÇÉ)
compose-assoc = ?

compose-sym-assoc
    : {c‚ÇÅ : Cospan A B}
      {c‚ÇÇ : Cospan B C}
      {c‚ÇÉ : Cospan C D}
    ‚Üí Same (compose (compose c‚ÇÅ c‚ÇÇ) c‚ÇÉ) (compose c‚ÇÅ (compose c‚ÇÇ c‚ÇÉ))
compose-sym-assoc = ?

CospanC : Category _ _ _
CospanC = record
    { Obj = Obj
    ; _‚áí_ = Cospan
    ; _‚âà_ = Same
    ; id = identity
    ; _‚àò_ = flip compose
    ; assoc = ?
    ; sym-assoc = compose-sym-assoc
    ; identityÀ° = ?
    ; identity ≥ = {! !}
    ; identity¬≤ = {! !}
    ; equiv = {! !}
    ; ‚àò-resp-‚âà = {! !}
    }
